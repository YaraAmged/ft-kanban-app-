import { createSlice, PayloadAction } from "@reduxjs/toolkit";
export interface Board {
  id: string;
  name: string;
}
export interface BoardsState {
  selectedBoard?: string;
  boards: Board[];
  loading: boolean;
}

const initialState: BoardsState = {
  boards: [],
  loading: true,
};

export const counterSlice = createSlice({
  name: "boards",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setBoards: (state, { payload }: PayloadAction<Board[]>) => {
      state.boards = payload;
    },
    setSelectedBoard: (
      state,
      { payload }: PayloadAction<string | undefined>
    ) => {
      state.selectedBoard = payload;
    },
    addBoard: (state, { payload }: PayloadAction<Board>) => {
      state.boards.push(payload);
    },
    deleteBoardAction: (state, { payload }: PayloadAction<string>) => {
      const boardIndex = state.boards.findIndex(
        (board) => board.id === payload
      );
      state.boards.splice(boardIndex, 1);
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateBoard: (
      state,
      { payload }: PayloadAction<{ board: Board; index: number }>
    ) => {
      state.boards.splice(payload.index, 1, payload.board);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  addBoard,
  deleteBoardAction,
  updateBoard,
  setSelectedBoard,
  setBoards,
} = counterSlice.actions;

export default counterSlice.reducer;
