import { createSlice, PayloadAction } from "@reduxjs/toolkit";
export interface TaskI {
  name: string;
  idList: string;
  id: string;
  subTasks: string[];
  desc: string;
}
export interface Column {
  id: string;
  name: string;
  cards: TaskI[];
}

export interface ColumnsState {
  columns: Column[];
  loading: boolean;
}

const initialState: ColumnsState = {
  columns: [],
  loading: false,
};

export const columnSlice = createSlice({
  name: "columns",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setColumns: (state, { payload }: PayloadAction<Column[]>) => {
      state.columns = payload;
      state.loading = false;
    },
    setColumnLoading: (state, { payload }: PayloadAction<boolean>) => {
      state.loading = payload;
    },
    createTaskAction: (state, { payload }: PayloadAction<TaskI>) => {
      const columnIndex = state.columns.findIndex(
        (col) => col.id === payload.idList
      );
      state.columns[columnIndex].cards.push(payload);
    },
    updateTaskAction: (
      state,
      { payload }: PayloadAction<{ task: TaskI; id: string; oldColumn: string }>
    ) => {
      const columnIndex = state.columns.findIndex(
        (col) => col.id === payload.task.idList
      );
      const taskIndex = state.columns[columnIndex].cards.findIndex(
        (card) => card.id === payload.id
      );
      const isInSameColumn = payload.task.idList === payload.oldColumn;
      if (isInSameColumn) {
        state.columns[columnIndex].cards.splice(taskIndex, 1, payload.task);
      } else {
        const oldColumnIndex = state.columns.findIndex(
          (col) => col.id === payload.oldColumn
        );

        const oldTaskIndex = state.columns[columnIndex].cards.findIndex(
          (card) => card.id === payload.id
        );
        state.columns[oldColumnIndex].cards.splice(oldTaskIndex, 1);
        state.columns[columnIndex].cards.push(payload.task);
      }
    },
    removeTaskAction: (
      state,
      { payload }: PayloadAction<{ idList: string; id: string }>
    ) => {
      const columnIndex = state.columns.findIndex(
        (col) => col.id === payload.idList
      );

      const taskIndex = state.columns[columnIndex].cards.findIndex(
        (card) => card.id === payload.id
      );
      state.columns[columnIndex].cards.splice(taskIndex, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  setColumns,
  updateTaskAction,
  createTaskAction,
  removeTaskAction,
  setColumnLoading,
} = columnSlice.actions;

export default columnSlice.reducer;
